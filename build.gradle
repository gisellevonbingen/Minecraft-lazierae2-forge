buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

version = "${mc_version}-${mod_version}"
group = "${mod_base}.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // AE2 mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // AE2 mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // AE2 mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

            // data generation
            forceExit false
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// resources from data generation
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "Modmaven" // Applied Energistics
        url "https://modmaven.dev/"
        content {
            includeGroup 'appeng'
        }
    }
    maven {
        name "Progwml6 Maven" // Just Enough Items
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name 'BlameJared Maven' // CraftTweaker
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'Architectury Maven' // Architectury
        url "https://maven.architectury.dev"
    }
    maven {
        name 'Saps Maven' // Rhino
        url "https://maven.saps.dev/minecraft"
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // required dependencies
    implementation fg.deobf("appeng:appliedenergistics2:${ae2_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${mc_version}:${crt_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${archi_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    compileOnly fg.deobf("dev.latvian.mods:kubejs-forge:${kube_version}")

    // runtime dependencies
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // JEI - in sync with API version
    // runtimeOnly fg.deobf("dev.latvian.mods:kubejs-forge:${kube_version}") // KubeJS - disable for DataGen
    runtimeOnly fg.deobf("curse.maven:top-245211:3671753") // TOP - 5.1.0
    runtimeOnly fg.deobf("curse.maven:ding-231275:3548400") // Ding - 1.3.0
    runtimeOnly fg.deobf("curse.maven:solar-336538:3770535") // Solar Generation - 4.1.1
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    debug.export = true
}

processResources {
    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
    def replaceProperties = [
        mod_id             : mod_id,
        mod_name           : mod_name,
        mod_version        : mod_version,
        mod_authors        : mod_authors,
        mod_description    : mod_description,
        mod_credits        : mod_credits,
        mc_version_range   : mc_version_range,
        forge_min_version  : forge_min_version,
        license            : license,
        github_user        : github_user,
        github_repo        : github_repo,
        ae2_version_range  : ae2_version_range,
        jei_version_range  : jei_version_range,
        crt_version_range  : crt_version_range,
        archi_version_range: archi_version_range,
        rhino_version_range: rhino_version_range,
        kube_version_range : kube_version_range
    ]

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
jar.finalizedBy('reobfJar')
